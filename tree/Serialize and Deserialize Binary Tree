/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root)
        return "null,";
        return to_string(root->val) + "," + serialize(root->left) + serialize(root->right);
    }
    TreeNode* Tree(queue<string> & q){
        string s=q.front();
        q.pop();
        if(s=="null")
        return NULL;
        TreeNode* t=new TreeNode(stoi(s));
        t->left=Tree(q);
        t->right=Tree(q);
        return t;
    }
    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        queue<string> q;
        string s="";
        for(char c:data){
            if(c==','){
                q.push(s);
                s="";
            }
            else
            s+=c;
        }
        if (!s.empty()) {
        q.push(s);
    }
        return Tree(q);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
